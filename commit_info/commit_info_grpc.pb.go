// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: commit_info.proto

package commit_info

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CommitData_Translate_FullMethodName = "/commit_info.CommitData/Translate"
)

// CommitDataClient is the client API for CommitData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommitDataClient interface {
	Translate(ctx context.Context, in *CommitInfo, opts ...grpc.CallOption) (*ServerResponse, error)
}

type commitDataClient struct {
	cc grpc.ClientConnInterface
}

func NewCommitDataClient(cc grpc.ClientConnInterface) CommitDataClient {
	return &commitDataClient{cc}
}

func (c *commitDataClient) Translate(ctx context.Context, in *CommitInfo, opts ...grpc.CallOption) (*ServerResponse, error) {
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, CommitData_Translate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommitDataServer is the server API for CommitData service.
// All implementations must embed UnimplementedCommitDataServer
// for forward compatibility
type CommitDataServer interface {
	Translate(context.Context, *CommitInfo) (*ServerResponse, error)
	mustEmbedUnimplementedCommitDataServer()
}

// UnimplementedCommitDataServer must be embedded to have forward compatible implementations.
type UnimplementedCommitDataServer struct {
}

func (UnimplementedCommitDataServer) Translate(context.Context, *CommitInfo) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Translate not implemented")
}
func (UnimplementedCommitDataServer) mustEmbedUnimplementedCommitDataServer() {}

// UnsafeCommitDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommitDataServer will
// result in compilation errors.
type UnsafeCommitDataServer interface {
	mustEmbedUnimplementedCommitDataServer()
}

func RegisterCommitDataServer(s grpc.ServiceRegistrar, srv CommitDataServer) {
	s.RegisterService(&CommitData_ServiceDesc, srv)
}

func _CommitData_Translate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitDataServer).Translate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommitData_Translate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitDataServer).Translate(ctx, req.(*CommitInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// CommitData_ServiceDesc is the grpc.ServiceDesc for CommitData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommitData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "commit_info.CommitData",
	HandlerType: (*CommitDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Translate",
			Handler:    _CommitData_Translate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "commit_info.proto",
}
